params {
    /* Input and output options */
    reads = "data/*{1,2}.fastq.gz"    // input reads (FASTA/FASTQ, gzip compressed files also supported)
    db = "db.*.fa"                    // genomes or sequences on which test the containment. Supported 
                                      // formats are FASTA (gzip compressed also supported) or mash 
                                      // sketches (if 'db_format = "sketch"')
    db_format = "fasta"               // 'fasta' or 'sketch'
    outdir = "./results"              // output directory

    /* Results filtering options */ 
    min_identity = 0.99               // min identity to report (it should be >0.8)
    max_pval = 0.05                   // max p-value to report
    winner_takes_all = false          
    
    /* Mash sketch options (if db_format = 'fasta') */
    sketch_size = 1000                // sketch size
    amino_acid = false                // amino acid alphabet
    individual = false                // sketch individual sequences, rather than whole files
            
    /* Limits */
    max_cpus = 8
    max_memory = 16.GB
    max_time = 24.h
}


/* Docker options */
docker.enabled = true
docker.runOptions = '-u \$(id -u):\$(id -g)'


/* Import process configuration file*/
includeConfig 'process.config'


/* Manifest */
manifest {
    homePage = 'metashot.github.io'
    description = 'Containment estimation of genomes, proteomes, plasmids and other sequences'
    mainScript = 'main.nf'
    version = '1.0.0'
}


/* Functions */
def check_max(obj, max) {
    // see https://github.com/nextflow-io/nextflow/issues/640
    if( obj instanceof nextflow.util.MemoryUnit ) {
        try {
            def max_type = max as nextflow.util.MemoryUnit
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max memory '${max}', using default value: $obj"
            return obj
        }   
    }
    if( obj instanceof nextflow.util.Duration ) {
        try {
            def max_type = max as nextflow.util.Duration
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max time '${max}', using default value $obj"
            return obj
        }         
    }
    if( obj instanceof Integer ) {
        try {
            return Math.min(obj, max as int)
        }   
        catch( all ) {
            println "ERROR: invalid max cpus '${max}', using default value $obj"
            return obj
        }         
    }    
}
